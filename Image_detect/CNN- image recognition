import numpy as np
import pandas as pd
from keras.layers import Input, Dense, Activation, ZeroPadding2D, Flatten, Conv2D
from keras.layers import MaxPooling2D
from keras.models import Model
from keras.preprocessing import image
from keras.models import load_model
from keras import metrics
from sklearn.model_selection import train_test_split
from keras.applications.imagenet_utils import preprocess_input
from IPython.display import SVG
from keras.utils.vis_utils import model_to_dot
from keras.utils import plot_model
from PIL import Image
import keras.backend as K
import tensorflow as tf
import keras
from keras.wrappers.scikit_learn import KerasClassifier
import csv
K.set_image_data_format('channels_last')
from matplotlib.pyplot import imshow
import os

#######################################################################################################################
modelSavePath = 'my_model3.h5'
numOfTestPoints = 2
batchSize = 16
numOfEpoches = 10
#######################################################################################################################

image_train_path = "/home/CSE6242/ML/googleview/train/images/"
feats_train_path = "/home/CSE6242/ML/googleview/train/feats_train.csv"
image_test_path = "/home/CSE6242/ML/googleview/test/images/"
feats_test_path = "/home/CSE6242/ML/googleview/test/feats.csv"
classes = 4
img_width = 512
img_height = 512
VECTOR_SIZE = 0
features_SIZE = 7
BATCH_SIZE = 4
EPOCHS = 1000
TRAIN_EXAMPLES = 100
TEST_EXAMPLES = 100
LR = 0.0001
def mean_pred(y_true, y_pred):
    return K.mean(y_pred)


# Crop and rotate image, return 12 images
def getCropImgs(img, needRotations=False):
    # img = img.convert('L')
    z = np.asarray(img, dtype=np.int8)
    c = []
    for i in range(3):
        for j in range(4):
            crop = z[512 * i:512 * (i + 1), 512 * j:512 * (j + 1), :]

            c.append(crop)
            if needRotations:
                c.append(np.rot90(np.rot90(crop)))

    # os.system('cls')
    # print("Crop imgs", c[2].shape)

    return c

# Get the softmax from folder name
def getAsSoftmax(fname):
    if (fname == 'b'):
        return [1, 0, 0, 0]
    elif (fname == 'is'):
        return [0, 1, 0, 0]
    elif (fname == 'iv'):
        return [0, 0, 1, 0]
    else:
        return [0, 0, 0, 1]


# Return all images as numpy array, labels
def get_imgs_frm_folder(path):
    # x = np.empty(shape=[19200,512,512,3],dtype=np.int8)
    # y = np.empty(shape=[400],dtype=np.int8)
    
    x_image = []
    y_image = []

    cnt = 0
    for foldname in os.listdir(path):
        for filename in os.listdir(os.path.join(path, foldname)):
            image_path = os.path.join(os.path.join(path, foldname), filename)
            img = Image.open(image_path)
            img = img.resize((img_width, img_height),Image.ANTIALIAS)
            img = img.convert('L')
            img = np.asarray(img, np.float16)

            '''
            if len(img.shape) == 2:
                img = np.concatenate((img, img, img), axis=-1)
                #img = np.reshape(img,(min_width,min_height,1))
            print
            '''
            x_image.append(np.divide(img, 255.))
            y_image.append(foldname)
            cnt += 1
            '''
            crpImgs = getCropImgs(img)
            cnt += 1
            if cnt % 10 == 0:
                print(str(cnt) + " Images loaded")
            for im in crpImgs:
                x.append(np.divide(np.asarray(im, np.float16), 255.))
                # Image.fromarray(np.divide(np.asarray(im, np.float16), 255.), 'RGB').show()
                y.append( (foldname))
                # print(getAsSoftmax(foldname))
            '''
    print("Images cropped")
    print("Loading as array")

    return x_image, y_image, cnt

# Load the dataset
def load_dataset(image_path,feats_path):
    print("Loading images..")

    train_set_x_orig, train_set_y_orig, cnt = get_imgs_frm_folder(image_path)

    feats_train = pd.read_csv(feats_path)
    feats_train = feats_train.join(pd.get_dummies(feats_train.我们需要的feature))
    X_img = []
    X_fea = []
    Y = []
    ID = []
    for i in range(len(train_set_y_orig)):
        sample = []
        X_img.append(train_set_x_orig[i])
        ID.append(train_set_y_orig[i])
        sample.append(feats_train[feats_train['id'].isin([train_set_y_orig[i]])]['age'].values)
        sample.append(feats_train[feats_train['id'].isin([train_set_y_orig[i]])][0].values)
        sample.append(feats_train[feats_train['id'].isin([train_set_y_orig[i]])][1].values)
        sample.append(feats_train[feats_train['id'].isin([train_set_y_orig[i]])][2].values)
        sample.append(feats_train[feats_train['id'].isin([train_set_y_orig[i]])][3].values)
        if feats_train[feats_train['id'].isin([train_set_y_orig[i]])]['P53'].values == True:
            sample.append(1)
            sample.append(0)
        else:
            sample.append(0)
            sample.append(1)
        Y.append(feats_train[feats_train['id'].isin([train_set_y_orig[i]])]['我们需要的feature2'].values)
        X_fea.append(sample)
    Y = np.array(Y)
    Y = Y-1
    Y = (np.arange(4)==Y[:None]).astype(np.integer)
    print("Y.shape:",Y.shape)
    X_fea = np.array(X_fea)
    X_fea[:,0] = X_fea[:,0]/X_fea[:,0].max()
    '''
    llen = Y.shape[0]
    cnt1 = 0
    cnt2 = 0
    cnt3 = 0
    cnt4 = 0
    for i in range(llen):
        if Y[i][0] == 1:
            cnt1 += 1
            X_fea = np.row_stack((X_fea,X_fea[i]))
            Y = np.row_stack((Y,Y[i]))
        if Y[i][1] == 1:
            cnt2 += 1
        if Y[i][2] == 1:
            cnt3 += 1
            X_fea = np.row_stack((X_fea,X_fea[i]))
            X_fea = np.row_stack((X_fea,X_fea[i]))
            Y = np.row_stack((Y,Y[i]))
            Y = np.row_stack((Y,Y[i]))
        if Y[i][3] == 1:
            cnt4 += 1
            X_fea = np.row_stack((X_fea,X_fea[i]))
            X_fea = np.row_stack((X_fea,X_fea[i]))
            X_fea = np.row_stack((X_fea,X_fea[i]))
            X_fea = np.row_stack((X_fea,X_fea[i]))
            X_fea = np.row_stack((X_fea,X_fea[i]))

            Y = np.row_stack((Y,Y[i]))
            Y = np.row_stack((Y,Y[i]))
            Y = np.row_stack((Y,Y[i]))
            Y = np.row_stack((Y,Y[i]))
            Y = np.row_stack((Y,Y[i]))
    print("1:",cnt1)
    print("2:",cnt2)
    print("3:",cnt3)
    print("4:",cnt4)
    '''
    from imblearn.over_sampling import RandomOverSampler,SMOTE, ADASYN
 
    X_resampled, y_resampled = SMOTE().fit_sample(X_fea, Y)
    #X_resampled, y_resampled = ros.fit_sample(X_fea, Y)
    x_img_train, x_img_test = train_test_split(X_img, train_size=0.70, random_state=33)
    y_train, y_test = train_test_split(y_resampled,train_size=0.70, random_state=33)
    x_fea_train, x_fea_test = train_test_split(X_resampled, train_size=0.70, random_state=33)
    TRAIN_EXAMPLES = len(x_fea_train)
    TEST_EXAMPLES = len(x_fea_test)

    
    print("Data load complete")

    return x_img_train, x_img_test, y_train, y_test, x_fea_train, x_fea_test,ID
def load_test_dataset(image_path,feats_path):
    print("Loading images..")

    train_set_x_orig, train_set_y_orig, cnt = get_imgs_frm_folder(image_path)

    feats_train = pd.read_csv(feats_path)
    feats_train = feats_train.join(pd.get_dummies(feats_train.HER2))
    X_img = []
    X_fea = []
    ID = []
    for i in range(len(train_set_y_orig)):
        sample = []
        X_img.append(train_set_x_orig[i])
        ID.append(train_set_y_orig[i])
        sample.append(feats_train[feats_train['id'].isin([train_set_y_orig[i]])]['age'].values)
        sample.append(feats_train[feats_train['id'].isin([train_set_y_orig[i]])][0].values)
        sample.append(feats_train[feats_train['id'].isin([train_set_y_orig[i]])][1].values)
        sample.append(feats_train[feats_train['id'].isin([train_set_y_orig[i]])][2].values)
        sample.append(feats_train[feats_train['id'].isin([train_set_y_orig[i]])][3].values)
        if feats_train[feats_train['id'].isin([train_set_y_orig[i]])]['P53'].values == True:
            sample.append(1)
            sample.append(0)
        else:
            sample.append(0)
            sample.append(1)
        X_fea.append(sample)

    X_fea = np.array(X_fea)
    X_fea[:,0] = X_fea[:,0]/X_fea[:,0].max()
    print("Test Data load complete")

    return X_img,X_fea,ID


